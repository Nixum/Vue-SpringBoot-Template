<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nixum.model.dao.auth.UserMapper">

    <resultMap id="UserMap" type="com.nixum.model.model.auth.User">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="email" jdbcType="VARCHAR" property="email"/>
        <result column="username" jdbcType="VARCHAR" property="username"/>
        <result column="password" jdbcType="VARCHAR" property="password"/>
        <result column="avatar" jdbcType="VARCHAR" property="avatar"/>
        <result column="resume" jdbcType="VARCHAR" property="resume"/>
        <result column="register_time" jdbcType="TIMESTAMP" property="registerTime"/>
        <result column="login_time" jdbcType="TIMESTAMP" property="loginTime"/>
    </resultMap>

    <resultMap id="UserWithRoleMap" type="com.nixum.model.model.auth.User" extends="UserMap">
        <result column="role_id" jdbcType="BIGINT" property="roleId" />
        <result column="role_name" jdbcType="VARCHAR" property="roleName" />
    </resultMap>

    <select id="findAllUserWithRole" resultMap="UserWithRoleMap">
        SELECT
        u.*,
        r.id as role_id,
        r.name as role_name
        FROM `user` u
        LEFT JOIN `user_role` ur ON u.id = ur.user_id
        LEFT JOIN `role` r ON ur.role_id = r.id
    </select>

    <resultMap id="UserDetailMap" type="com.nixum.model.model.auth.User" extends="UserWithRoleMap">
        <!-- 1角色对应多权限 -->
        <collection property="permissionCodeList" ofType="String">
            <result column="permission_code" jdbcType="VARCHAR" property="code" />
        </collection>
    </resultMap>

    <select id="findDetailBy" resultMap="UserDetailMap">
        SELECT
        u.*,
        r.id as role_id,
        r.name as role_name,
        p.code as permission_code
        FROM `user` u
        LEFT JOIN `user_role` ur ON u.id = ur.user_id
        LEFT JOIN `role` r ON ur.role_id = r.id
        LEFT JOIN `role_permission` rp ON r.id = rp.role_id
        LEFT JOIN `permission` p ON rp.permission_id = p.id
        <where>
            <if test="id != null">u.id = #{id}</if>
            <if test="email != null">u.email = #{email}</if>
            <if test="username != null">u.username = #{username}</if>
        </where>
    </select>

    <update id="updateLoginTimeByUsername">
        UPDATE `user` SET
        login_time = NOW()
        WHERE username = #{username}
    </update>

</mapper>